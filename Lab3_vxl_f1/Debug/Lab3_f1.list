
Lab3_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002da0  08002da0  00003da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df8  08002df8  00004074  2**0
                  CONTENTS
  4 .ARM          00000000  08002df8  08002df8  00004074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df8  08002df8  00004074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df8  08002df8  00003df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08002e00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  08002e74  00004074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002e74  00004180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f6b  00000000  00000000  0000409d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002270  00000000  00000000  0000d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0000f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000832  00000000  00000000  0000fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012136  00000000  00000000  0001058a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fae9  00000000  00000000  000226c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006784d  00000000  00000000  000321a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000999f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  00099a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0009c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d88 	.word	0x08002d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08002d88 	.word	0x08002d88

08000210 <Led7Seg_int>:
 *      Author: Admin
 */
#include "Led7Seg_Display.h"
////////////////            DISPLAY-7SEG             ////////////////

void Led7Seg_int(GPIO_7SEG_Config GPIO_Config[7]){
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 7; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e00f      	b.n	800023e <Led7Seg_int+0x2e>
		Led_7Seg_Array[i] = GPIO_Config[i];
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	687a      	ldr	r2, [r7, #4]
 8000224:	18d1      	adds	r1, r2, r3
 8000226:	4a0a      	ldr	r2, [pc, #40]	@ (8000250 <Led7Seg_int+0x40>)
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	00db      	lsls	r3, r3, #3
 800022c:	4413      	add	r3, r2
 800022e:	460a      	mov	r2, r1
 8000230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000234:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 7; i++) {
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3301      	adds	r3, #1
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2b06      	cmp	r3, #6
 8000242:	ddec      	ble.n	800021e <Led7Seg_int+0xe>
	}
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	2000000c 	.word	0x2000000c

08000254 <calculator_BCD_to_7SEG>:
// 4bit [3:0] -> [A:B]
uint8_t A, B, C, D;
// f(ABCD)
bool a, b, c, d, e, f, g;

void calculator_BCD_to_7SEG(int num){
 8000254:	b4b0      	push	{r4, r5, r7}
 8000256:	b08f      	sub	sp, #60	@ 0x3c
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint8_t  buffer;
	unsigned int LED_4bit[] = {
 800025c:	4b9a      	ldr	r3, [pc, #616]	@ (80004c8 <calculator_BCD_to_7SEG+0x274>)
 800025e:	f107 040c 	add.w	r4, r7, #12
 8000262:	461d      	mov	r5, r3
 8000264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000270:	e884 0003 	stmia.w	r4, {r0, r1}
		    0b0110, //  6
		    0b0111, //  7
		    0b1000, //  8
		    0b1001  //  9
		};
	buffer = LED_4bit[num];
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	3338      	adds	r3, #56	@ 0x38
 800027a:	443b      	add	r3, r7
 800027c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	// 4bit [3:0] -> [A:B]
	A = (buffer >> 3) & 1;
 8000284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000288:	08db      	lsrs	r3, r3, #3
 800028a:	b2db      	uxtb	r3, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b8e      	ldr	r3, [pc, #568]	@ (80004cc <calculator_BCD_to_7SEG+0x278>)
 8000294:	701a      	strb	r2, [r3, #0]
	B = (buffer >> 2) & 1;
 8000296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800029a:	089b      	lsrs	r3, r3, #2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b8a      	ldr	r3, [pc, #552]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80002a6:	701a      	strb	r2, [r3, #0]
	C = (buffer >> 1) & 1;
 80002a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80002ac:	085b      	lsrs	r3, r3, #1
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b87      	ldr	r3, [pc, #540]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 80002b8:	701a      	strb	r2, [r3, #0]
	D = (buffer >> 0) & 1;
 80002ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b84      	ldr	r3, [pc, #528]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 80002c6:	701a      	strb	r2, [r3, #0]

	// f(ABCD)
	a = ((!B)&(!D)) | C | (B&D) | A;
 80002c8:	4b81      	ldr	r3, [pc, #516]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80002ca:	781a      	ldrb	r2, [r3, #0]
 80002cc:	4b82      	ldr	r3, [pc, #520]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	bf0c      	ite	eq
 80002d8:	2301      	moveq	r3, #1
 80002da:	2300      	movne	r3, #0
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	4b7c      	ldr	r3, [pc, #496]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	4a7a      	ldr	r2, [pc, #488]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80002e8:	7811      	ldrb	r1, [r2, #0]
 80002ea:	4a7b      	ldr	r2, [pc, #492]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	400a      	ands	r2, r1
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	4313      	orrs	r3, r2
 80002f4:	4a75      	ldr	r2, [pc, #468]	@ (80004cc <calculator_BCD_to_7SEG+0x278>)
 80002f6:	7812      	ldrb	r2, [r2, #0]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bf14      	ite	ne
 80002fe:	2301      	movne	r3, #1
 8000300:	2300      	moveq	r3, #0
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b75      	ldr	r3, [pc, #468]	@ (80004dc <calculator_BCD_to_7SEG+0x288>)
 8000306:	701a      	strb	r2, [r3, #0]
	b = (!B) | ((!C)&(!D)) | (C&D);
 8000308:	4b71      	ldr	r3, [pc, #452]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b6f      	ldr	r3, [pc, #444]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 8000318:	7819      	ldrb	r1, [r3, #0]
 800031a:	4b6f      	ldr	r3, [pc, #444]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	430b      	orrs	r3, r1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf0c      	ite	eq
 8000326:	2301      	moveq	r3, #1
 8000328:	2300      	movne	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	4313      	orrs	r3, r2
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4619      	mov	r1, r3
 8000332:	4b68      	ldr	r3, [pc, #416]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b68      	ldr	r3, [pc, #416]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4013      	ands	r3, r2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	430b      	orrs	r3, r1
 8000340:	2b00      	cmp	r3, #0
 8000342:	bf14      	ite	ne
 8000344:	2301      	movne	r3, #1
 8000346:	2300      	moveq	r3, #0
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b65      	ldr	r3, [pc, #404]	@ (80004e0 <calculator_BCD_to_7SEG+0x28c>)
 800034c:	701a      	strb	r2, [r3, #0]
	c = (!C) | D | B;
 800034e:	4b61      	ldr	r3, [pc, #388]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf0c      	ite	eq
 8000356:	2301      	moveq	r3, #1
 8000358:	2300      	movne	r3, #0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	4b5e      	ldr	r3, [pc, #376]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4313      	orrs	r3, r2
 8000364:	4a5a      	ldr	r2, [pc, #360]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	4313      	orrs	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	bf14      	ite	ne
 800036e:	2301      	movne	r3, #1
 8000370:	2300      	moveq	r3, #0
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b5b      	ldr	r3, [pc, #364]	@ (80004e4 <calculator_BCD_to_7SEG+0x290>)
 8000376:	701a      	strb	r2, [r3, #0]
	d = ((!B)&(!D)) | ((!B)&C) | ((B&!C)&D) | (C&(!D)) | A;
 8000378:	4b55      	ldr	r3, [pc, #340]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	4b56      	ldr	r3, [pc, #344]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	bf0c      	ite	eq
 8000388:	2301      	moveq	r3, #1
 800038a:	2300      	movne	r3, #0
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	4b4f      	ldr	r3, [pc, #316]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4619      	mov	r1, r3
 80003a0:	4b4c      	ldr	r3, [pc, #304]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	400b      	ands	r3, r1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4b49      	ldr	r3, [pc, #292]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	bf0c      	ite	eq
 80003b6:	2301      	moveq	r3, #1
 80003b8:	2300      	movne	r3, #0
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	400b      	ands	r3, r1
 80003be:	4946      	ldr	r1, [pc, #280]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 80003c0:	7809      	ldrb	r1, [r1, #0]
 80003c2:	400b      	ands	r3, r1
 80003c4:	431a      	orrs	r2, r3
 80003c6:	4b43      	ldr	r3, [pc, #268]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4b42      	ldr	r3, [pc, #264]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	bf0c      	ite	eq
 80003d4:	2301      	moveq	r3, #1
 80003d6:	2300      	movne	r3, #0
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	400b      	ands	r3, r1
 80003dc:	4313      	orrs	r3, r2
 80003de:	4a3b      	ldr	r2, [pc, #236]	@ (80004cc <calculator_BCD_to_7SEG+0x278>)
 80003e0:	7812      	ldrb	r2, [r2, #0]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	bf14      	ite	ne
 80003e8:	2301      	movne	r3, #1
 80003ea:	2300      	moveq	r3, #0
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b3e      	ldr	r3, [pc, #248]	@ (80004e8 <calculator_BCD_to_7SEG+0x294>)
 80003f0:	701a      	strb	r2, [r3, #0]
	e = ((!B)&(!D)) | (C&(!D));
 80003f2:	4b37      	ldr	r3, [pc, #220]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80003f4:	781a      	ldrb	r2, [r3, #0]
 80003f6:	4b38      	ldr	r3, [pc, #224]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf0c      	ite	eq
 8000402:	2301      	moveq	r3, #1
 8000404:	2300      	movne	r3, #0
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	4b32      	ldr	r3, [pc, #200]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	4b31      	ldr	r3, [pc, #196]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	bf0c      	ite	eq
 8000418:	2301      	moveq	r3, #1
 800041a:	2300      	movne	r3, #0
 800041c:	b2db      	uxtb	r3, r3
 800041e:	400b      	ands	r3, r1
 8000420:	4313      	orrs	r3, r2
 8000422:	2b00      	cmp	r3, #0
 8000424:	bf14      	ite	ne
 8000426:	2301      	movne	r3, #1
 8000428:	2300      	moveq	r3, #0
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b2f      	ldr	r3, [pc, #188]	@ (80004ec <calculator_BCD_to_7SEG+0x298>)
 800042e:	701a      	strb	r2, [r3, #0]
	f = ((!C)&(!D)) | (B&(!C)) | (B&(!D)) | A;
 8000430:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 8000432:	781a      	ldrb	r2, [r3, #0]
 8000434:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	bf0c      	ite	eq
 8000440:	2301      	moveq	r3, #1
 8000442:	2300      	movne	r3, #0
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	4b21      	ldr	r3, [pc, #132]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4619      	mov	r1, r3
 800044e:	4b21      	ldr	r3, [pc, #132]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	bf0c      	ite	eq
 8000456:	2301      	moveq	r3, #1
 8000458:	2300      	movne	r3, #0
 800045a:	b2db      	uxtb	r3, r3
 800045c:	400b      	ands	r3, r1
 800045e:	431a      	orrs	r2, r3
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <calculator_BCD_to_7SEG+0x284>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	bf0c      	ite	eq
 800046e:	2301      	moveq	r3, #1
 8000470:	2300      	movne	r3, #0
 8000472:	b2db      	uxtb	r3, r3
 8000474:	400b      	ands	r3, r1
 8000476:	4313      	orrs	r3, r2
 8000478:	4a14      	ldr	r2, [pc, #80]	@ (80004cc <calculator_BCD_to_7SEG+0x278>)
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	4313      	orrs	r3, r2
 800047e:	2b00      	cmp	r3, #0
 8000480:	bf14      	ite	ne
 8000482:	2301      	movne	r3, #1
 8000484:	2300      	moveq	r3, #0
 8000486:	b2da      	uxtb	r2, r3
 8000488:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <calculator_BCD_to_7SEG+0x29c>)
 800048a:	701a      	strb	r2, [r3, #0]
	g = ((!B)&C) | (B&(!C)) | A | (B&(!D));
 800048c:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	bf0c      	ite	eq
 8000494:	2301      	moveq	r3, #1
 8000496:	2300      	movne	r3, #0
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	401a      	ands	r2, r3
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <calculator_BCD_to_7SEG+0x280>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf0c      	ite	eq
 80004b0:	2301      	moveq	r3, #1
 80004b2:	2300      	movne	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	400b      	ands	r3, r1
 80004b8:	4313      	orrs	r3, r2
 80004ba:	4a04      	ldr	r2, [pc, #16]	@ (80004cc <calculator_BCD_to_7SEG+0x278>)
 80004bc:	7812      	ldrb	r2, [r2, #0]
 80004be:	431a      	orrs	r2, r3
 80004c0:	4b03      	ldr	r3, [pc, #12]	@ (80004d0 <calculator_BCD_to_7SEG+0x27c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	e015      	b.n	80004f4 <calculator_BCD_to_7SEG+0x2a0>
 80004c8:	08002da0 	.word	0x08002da0
 80004cc:	20000090 	.word	0x20000090
 80004d0:	20000091 	.word	0x20000091
 80004d4:	20000092 	.word	0x20000092
 80004d8:	20000093 	.word	0x20000093
 80004dc:	20000094 	.word	0x20000094
 80004e0:	20000095 	.word	0x20000095
 80004e4:	20000096 	.word	0x20000096
 80004e8:	20000097 	.word	0x20000097
 80004ec:	20000098 	.word	0x20000098
 80004f0:	20000099 	.word	0x20000099
 80004f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <calculator_BCD_to_7SEG+0x2cc>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf0c      	ite	eq
 80004fc:	2301      	moveq	r3, #1
 80004fe:	2300      	movne	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	400b      	ands	r3, r1
 8000504:	4313      	orrs	r3, r2
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf14      	ite	ne
 800050a:	2301      	movne	r3, #1
 800050c:	2300      	moveq	r3, #0
 800050e:	b2da      	uxtb	r2, r3
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <calculator_BCD_to_7SEG+0x2d0>)
 8000512:	701a      	strb	r2, [r3, #0]

}
 8000514:	bf00      	nop
 8000516:	373c      	adds	r7, #60	@ 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000093 	.word	0x20000093
 8000524:	2000009a 	.word	0x2000009a

08000528 <display7SEG>:



void display7SEG(int num){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	calculator_BCD_to_7SEG(num);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f7ff fe8f 	bl	8000254 <calculator_BCD_to_7SEG>
    HAL_GPIO_WritePin(Led_7Seg_Array[0].Port, Led_7Seg_Array[0].Pin, !a);
 8000536:	4b2c      	ldr	r3, [pc, #176]	@ (80005e8 <display7SEG+0xc0>)
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	4b2b      	ldr	r3, [pc, #172]	@ (80005e8 <display7SEG+0xc0>)
 800053c:	8899      	ldrh	r1, [r3, #4]
 800053e:	4b2b      	ldr	r3, [pc, #172]	@ (80005ec <display7SEG+0xc4>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f001 fc0e 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[1].Port, Led_7Seg_Array[1].Pin, !b);
 800054e:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <display7SEG+0xc0>)
 8000550:	6898      	ldr	r0, [r3, #8]
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <display7SEG+0xc0>)
 8000554:	8999      	ldrh	r1, [r3, #12]
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <display7SEG+0xc8>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	f083 0301 	eor.w	r3, r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	f001 fc02 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[2].Port, Led_7Seg_Array[2].Pin, !c);
 8000566:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <display7SEG+0xc0>)
 8000568:	6918      	ldr	r0, [r3, #16]
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <display7SEG+0xc0>)
 800056c:	8a99      	ldrh	r1, [r3, #20]
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <display7SEG+0xcc>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	f083 0301 	eor.w	r3, r3, #1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	f001 fbf6 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[3].Port, Led_7Seg_Array[3].Pin, !d);
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <display7SEG+0xc0>)
 8000580:	6998      	ldr	r0, [r3, #24]
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <display7SEG+0xc0>)
 8000584:	8b99      	ldrh	r1, [r3, #28]
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <display7SEG+0xd0>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	f083 0301 	eor.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	f001 fbea 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[4].Port, Led_7Seg_Array[4].Pin, !e);
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <display7SEG+0xc0>)
 8000598:	6a18      	ldr	r0, [r3, #32]
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <display7SEG+0xc0>)
 800059c:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <display7SEG+0xd4>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	f001 fbde 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[5].Port, Led_7Seg_Array[5].Pin, !f);
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <display7SEG+0xc0>)
 80005b0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <display7SEG+0xc0>)
 80005b4:	8d99      	ldrh	r1, [r3, #44]	@ 0x2c
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <display7SEG+0xd8>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	f083 0301 	eor.w	r3, r3, #1
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	f001 fbd2 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led_7Seg_Array[6].Port, Led_7Seg_Array[6].Pin, !g);
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <display7SEG+0xc0>)
 80005c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <display7SEG+0xc0>)
 80005cc:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <display7SEG+0xdc>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	f001 fbc6 	bl	8001d6a <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000000c 	.word	0x2000000c
 80005ec:	20000094 	.word	0x20000094
 80005f0:	20000095 	.word	0x20000095
 80005f4:	20000096 	.word	0x20000096
 80005f8:	20000097 	.word	0x20000097
 80005fc:	20000098 	.word	0x20000098
 8000600:	20000099 	.word	0x20000099
 8000604:	2000009a 	.word	0x2000009a

08000608 <init_button>:
uint16_t TimeOutForKeyPress[MAX_BUTTON];
uint16_t button_pressed[MAX_BUTTON] = {0};
uint16_t button_long_pressed[MAX_BUTTON] = {0};
uint16_t button_flag[MAX_BUTTON] = {0};

void init_button(){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_BUTTON; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e018      	b.n	8000646 <init_button+0x3e>
        for (int j = 0; j < 4; j++) {
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	e00a      	b.n	8000630 <init_button+0x28>
            KeyReg[i][j] = NORMAL_STATE;
 800061a:	490f      	ldr	r1, [pc, #60]	@ (8000658 <init_button+0x50>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	009a      	lsls	r2, r3, #2
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	4413      	add	r3, r2
 8000624:	2201      	movs	r2, #1
 8000626:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < 4; j++) {
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2b03      	cmp	r3, #3
 8000634:	ddf1      	ble.n	800061a <init_button+0x12>
        }
        TimeOutForKeyPress[i] = TIME_OUT;
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <init_button+0x54>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2132      	movs	r1, #50	@ 0x32
 800063c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b02      	cmp	r3, #2
 800064a:	dde3      	ble.n	8000614 <init_button+0xc>
    }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	2000009c 	.word	0x2000009c
 800065c:	200000b4 	.word	0x200000b4

08000660 <init_gpi_button>:
void init_gpi_button(int i) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    switch (i) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d01f      	beq.n	80006ae <init_gpi_button+0x4e>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b02      	cmp	r3, #2
 8000672:	dc27      	bgt.n	80006c4 <init_gpi_button+0x64>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <init_gpi_button+0x22>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d00b      	beq.n	8000698 <init_gpi_button+0x38>
        case 2:
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
            break;
        // Thêm các nút khác nếu có
        default:
            break;
 8000680:	e020      	b.n	80006c4 <init_gpi_button+0x64>
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000682:	2101      	movs	r1, #1
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <init_gpi_button+0x70>)
 8000686:	f001 fb59 	bl	8001d3c <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	4619      	mov	r1, r3
 800068e:	4a11      	ldr	r2, [pc, #68]	@ (80006d4 <init_gpi_button+0x74>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            break;
 8000696:	e016      	b.n	80006c6 <init_gpi_button+0x66>
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000698:	2102      	movs	r1, #2
 800069a:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <init_gpi_button+0x70>)
 800069c:	f001 fb4e 	bl	8001d3c <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4a0b      	ldr	r2, [pc, #44]	@ (80006d4 <init_gpi_button+0x74>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            break;
 80006ac:	e00b      	b.n	80006c6 <init_gpi_button+0x66>
            KeyReg[i][0] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80006ae:	2104      	movs	r1, #4
 80006b0:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <init_gpi_button+0x70>)
 80006b2:	f001 fb43 	bl	8001d3c <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <init_gpi_button+0x74>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            break;
 80006c2:	e000      	b.n	80006c6 <init_gpi_button+0x66>
            break;
 80006c4:	bf00      	nop
    }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	2000009c 	.word	0x2000009c

080006d8 <isButtonPressed>:
int isButtonPressed(int number){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	if(button_flag[number] == 1){
 80006e0:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <isButtonPressed+0x30>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d106      	bne.n	80006fa <isButtonPressed+0x22>
		button_flag[number] = 0;
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <isButtonPressed+0x30>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2100      	movs	r1, #0
 80006f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <isButtonPressed+0x24>
	}
	return 0;
 80006fa:	2300      	movs	r3, #0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000c4 	.word	0x200000c4

0800070c <isButtonLongPressed>:

int isButtonLongPressed(int number){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if(button_long_pressed[number] == 1){
 8000714:	4a09      	ldr	r2, [pc, #36]	@ (800073c <isButtonLongPressed+0x30>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d106      	bne.n	800072e <isButtonLongPressed+0x22>
		button_long_pressed[number] = 0;
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <isButtonLongPressed+0x30>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2100      	movs	r1, #0
 8000726:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <isButtonLongPressed+0x24>
	}
	return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200000bc 	.word	0x200000bc

08000740 <getKeyInput>:
//
//}



void getKeyInput() {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e017      	b.n	800077c <getKeyInput+0x3c>
        KeyReg[i][2] = KeyReg[i][1];
 800074c:	4a46      	ldr	r2, [pc, #280]	@ (8000868 <getKeyInput+0x128>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4413      	add	r3, r2
 8000754:	8859      	ldrh	r1, [r3, #2]
 8000756:	4a44      	ldr	r2, [pc, #272]	@ (8000868 <getKeyInput+0x128>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	4413      	add	r3, r2
 800075e:	460a      	mov	r2, r1
 8000760:	809a      	strh	r2, [r3, #4]
        KeyReg[i][1] = KeyReg[i][0];
 8000762:	4a41      	ldr	r2, [pc, #260]	@ (8000868 <getKeyInput+0x128>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
 800076a:	4a3f      	ldr	r2, [pc, #252]	@ (8000868 <getKeyInput+0x128>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b02      	cmp	r3, #2
 8000780:	dde4      	ble.n	800074c <getKeyInput+0xc>
    }
    // Cập nhật trạng thái từ nút nhấn cho từng nút
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e066      	b.n	8000856 <getKeyInput+0x116>
        init_gpi_button(i);
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f7ff ff69 	bl	8000660 <init_gpi_button>
        // Kiểm tra trạng thái debounce
        if ((KeyReg[i][1] == KeyReg[i][0]) && (KeyReg[i][1] == KeyReg[i][2])) {
 800078e:	4a36      	ldr	r2, [pc, #216]	@ (8000868 <getKeyInput+0x128>)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	885a      	ldrh	r2, [r3, #2]
 8000798:	4933      	ldr	r1, [pc, #204]	@ (8000868 <getKeyInput+0x128>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d155      	bne.n	8000850 <getKeyInput+0x110>
 80007a4:	4a30      	ldr	r2, [pc, #192]	@ (8000868 <getKeyInput+0x128>)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	885a      	ldrh	r2, [r3, #2]
 80007ae:	492e      	ldr	r1, [pc, #184]	@ (8000868 <getKeyInput+0x128>)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	889b      	ldrh	r3, [r3, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d149      	bne.n	8000850 <getKeyInput+0x110>
            if (KeyReg[i][2] != KeyReg[i][3]) {
 80007bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000868 <getKeyInput+0x128>)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	889a      	ldrh	r2, [r3, #4]
 80007c6:	4928      	ldr	r1, [pc, #160]	@ (8000868 <getKeyInput+0x128>)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	440b      	add	r3, r1
 80007ce:	88db      	ldrh	r3, [r3, #6]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d01c      	beq.n	800080e <getKeyInput+0xce>
                KeyReg[i][3] = KeyReg[i][2];
 80007d4:	4a24      	ldr	r2, [pc, #144]	@ (8000868 <getKeyInput+0x128>)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4413      	add	r3, r2
 80007dc:	8899      	ldrh	r1, [r3, #4]
 80007de:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <getKeyInput+0x128>)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4413      	add	r3, r2
 80007e6:	460a      	mov	r2, r1
 80007e8:	80da      	strh	r2, [r3, #6]
                if (KeyReg[i][3] == PRESSED_STATE) {
 80007ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000868 <getKeyInput+0x128>)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	88db      	ldrh	r3, [r3, #6]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12b      	bne.n	8000850 <getKeyInput+0x110>
                    TimeOutForKeyPress[i] = TIME_OUT;
 80007f8:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <getKeyInput+0x12c>)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2132      	movs	r1, #50	@ 0x32
 80007fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    button_flag[i] = 1;
 8000802:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <getKeyInput+0x130>)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2101      	movs	r1, #1
 8000808:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800080c:	e020      	b.n	8000850 <getKeyInput+0x110>
                }
            } else {
                // Giảm TimeOutForKeyPress và kiểm tra nhấn giữ
                TimeOutForKeyPress[i]--;
 800080e:	4a17      	ldr	r2, [pc, #92]	@ (800086c <getKeyInput+0x12c>)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000816:	3b01      	subs	r3, #1
 8000818:	b299      	uxth	r1, r3
 800081a:	4a14      	ldr	r2, [pc, #80]	@ (800086c <getKeyInput+0x12c>)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (TimeOutForKeyPress[i] == 0) {
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <getKeyInput+0x12c>)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d110      	bne.n	8000850 <getKeyInput+0x110>
                    TimeOutForKeyPress[i] = TIME_OUT;
 800082e:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <getKeyInput+0x12c>)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2132      	movs	r1, #50	@ 0x32
 8000834:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (KeyReg[i][3] == PRESSED_STATE) {
 8000838:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <getKeyInput+0x128>)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	88db      	ldrh	r3, [r3, #6]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <getKeyInput+0x110>
                        button_long_pressed[i] = 1;
 8000846:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <getKeyInput+0x134>)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2101      	movs	r1, #1
 800084c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < MAX_BUTTON; i++) {
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	2b02      	cmp	r3, #2
 800085a:	dd95      	ble.n	8000788 <getKeyInput+0x48>
                    }
                }
            }
        }
    }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000009c 	.word	0x2000009c
 800086c:	200000b4 	.word	0x200000b4
 8000870:	200000c4 	.word	0x200000c4
 8000874:	200000bc 	.word	0x200000bc

08000878 <fsm_automatic>:

/////////////////////////////////////////TRAFFIC_LIGHT////////////////////////////////////////////////////
//// 4 way traffic light
typedef enum {state_0, state_1, state_2, state_3} state;
state pre_state = state_0;
void fsm_automatic(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	//7segment display

	//count_down();
	switch (pre_state) {
 800087c:	4b61      	ldr	r3, [pc, #388]	@ (8000a04 <fsm_automatic+0x18c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	f200 80b2 	bhi.w	80009ea <fsm_automatic+0x172>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <fsm_automatic+0x14>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	0800089d 	.word	0x0800089d
 8000890:	080008f7 	.word	0x080008f7
 8000894:	0800094f 	.word	0x0800094f
 8000898:	0800099b 	.word	0x0800099b
		case state_0:
			updateClockBuffer(value_7seg_red_0, value_7seg_green2_0);
 800089c:	4b5a      	ldr	r3, [pc, #360]	@ (8000a08 <fsm_automatic+0x190>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	4a5a      	ldr	r2, [pc, #360]	@ (8000a0c <fsm_automatic+0x194>)
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fe56 	bl	8001558 <updateClockBuffer>
			//traffic
			decoder_Led(0);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fc65 	bl	800117c <decoder_Led>

			if(flag_timer[1]){
 80008b2:	4b57      	ldr	r3, [pc, #348]	@ (8000a10 <fsm_automatic+0x198>)
 80008b4:	885b      	ldrh	r3, [r3, #2]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 8099 	beq.w	80009ee <fsm_automatic+0x176>
				//traffic 1
				--value_7seg_red_01;
 80008bc:	4b55      	ldr	r3, [pc, #340]	@ (8000a14 <fsm_automatic+0x19c>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <fsm_automatic+0x19c>)
 80008c6:	801a      	strh	r2, [r3, #0]
				--value_7seg_red_0;
 80008c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000a08 <fsm_automatic+0x190>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000a08 <fsm_automatic+0x190>)
 80008d2:	801a      	strh	r2, [r3, #0]
				//traffic 2
				--value_7seg_green2_0;
 80008d4:	4b4d      	ldr	r3, [pc, #308]	@ (8000a0c <fsm_automatic+0x194>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b4b      	ldr	r3, [pc, #300]	@ (8000a0c <fsm_automatic+0x194>)
 80008de:	801a      	strh	r2, [r3, #0]

				if(value_7seg_red_01 < 1){
 80008e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <fsm_automatic+0x19c>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <fsm_automatic+0x76>
					pre_state = state_1;
 80008e8:	4b46      	ldr	r3, [pc, #280]	@ (8000a04 <fsm_automatic+0x18c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]

				}

				flag_timer[1] = 0;
 80008ee:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <fsm_automatic+0x198>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	805a      	strh	r2, [r3, #2]
			}


			break;
 80008f4:	e07b      	b.n	80009ee <fsm_automatic+0x176>

		case state_1:
			updateClockBuffer(value_7seg_red_0, value_7seg_yellow2_0);
 80008f6:	4b44      	ldr	r3, [pc, #272]	@ (8000a08 <fsm_automatic+0x190>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <fsm_automatic+0x1a0>)
 80008fc:	8812      	ldrh	r2, [r2, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fe29 	bl	8001558 <updateClockBuffer>
			//traffic
			decoder_Led(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 fc38 	bl	800117c <decoder_Led>
			if(flag_timer[1]){
 800090c:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <fsm_automatic+0x198>)
 800090e:	885b      	ldrh	r3, [r3, #2]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d06e      	beq.n	80009f2 <fsm_automatic+0x17a>

				--value_7seg_red_02;
 8000914:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <fsm_automatic+0x1a4>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a1c <fsm_automatic+0x1a4>)
 800091e:	801a      	strh	r2, [r3, #0]
				--value_7seg_red_0;
 8000920:	4b39      	ldr	r3, [pc, #228]	@ (8000a08 <fsm_automatic+0x190>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <fsm_automatic+0x190>)
 800092a:	801a      	strh	r2, [r3, #0]
				//traffic 2
				--value_7seg_yellow2_0;
 800092c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a18 <fsm_automatic+0x1a0>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	b29a      	uxth	r2, r3
 8000934:	4b38      	ldr	r3, [pc, #224]	@ (8000a18 <fsm_automatic+0x1a0>)
 8000936:	801a      	strh	r2, [r3, #0]


				if(value_7seg_red_02 < 1){
 8000938:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <fsm_automatic+0x1a4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <fsm_automatic+0xce>
					pre_state = state_2;
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <fsm_automatic+0x18c>)
 8000942:	2202      	movs	r2, #2
 8000944:	701a      	strb	r2, [r3, #0]
				}


				flag_timer[1] = 0;
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <fsm_automatic+0x198>)
 8000948:	2200      	movs	r2, #0
 800094a:	805a      	strh	r2, [r3, #2]
			}

			break;
 800094c:	e051      	b.n	80009f2 <fsm_automatic+0x17a>

		case state_2:
			//7segment display
			updateClockBuffer(value_7seg_green_0, value_7seg_red2_0);
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <fsm_automatic+0x1a8>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	4a34      	ldr	r2, [pc, #208]	@ (8000a24 <fsm_automatic+0x1ac>)
 8000954:	8812      	ldrh	r2, [r2, #0]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fdfd 	bl	8001558 <updateClockBuffer>
			//traffic
			decoder_Led(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 fc0c 	bl	800117c <decoder_Led>
			if(flag_timer[1]){
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <fsm_automatic+0x198>)
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d044      	beq.n	80009f6 <fsm_automatic+0x17e>

				--value_7seg_green_0;
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <fsm_automatic+0x1a8>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	3b01      	subs	r3, #1
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <fsm_automatic+0x1a8>)
 8000976:	801a      	strh	r2, [r3, #0]
				//traffic 2
				--value_7seg_red2_0;
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <fsm_automatic+0x1ac>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	3b01      	subs	r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <fsm_automatic+0x1ac>)
 8000982:	801a      	strh	r2, [r3, #0]
				if(value_7seg_green_0 < 1){
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <fsm_automatic+0x1a8>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <fsm_automatic+0x11a>
					pre_state = state_3;
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <fsm_automatic+0x18c>)
 800098e:	2203      	movs	r2, #3
 8000990:	701a      	strb	r2, [r3, #0]
				}


				flag_timer[1] = 0;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <fsm_automatic+0x198>)
 8000994:	2200      	movs	r2, #0
 8000996:	805a      	strh	r2, [r3, #2]
			}

			break;
 8000998:	e02d      	b.n	80009f6 <fsm_automatic+0x17e>

		case state_3:
			//7segment display
			updateClockBuffer(value_7seg_yellow_0, value_7seg_red2_0);
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <fsm_automatic+0x1b0>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	4a21      	ldr	r2, [pc, #132]	@ (8000a24 <fsm_automatic+0x1ac>)
 80009a0:	8812      	ldrh	r2, [r2, #0]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fdd7 	bl	8001558 <updateClockBuffer>
			//traffic
			decoder_Led(3);
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 fbe6 	bl	800117c <decoder_Led>
			if(flag_timer[1]){
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <fsm_automatic+0x198>)
 80009b2:	885b      	ldrh	r3, [r3, #2]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d020      	beq.n	80009fa <fsm_automatic+0x182>

				--value_7seg_yellow_0;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <fsm_automatic+0x1b0>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	3b01      	subs	r3, #1
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <fsm_automatic+0x1b0>)
 80009c2:	801a      	strh	r2, [r3, #0]
				//traffic 2
				--value_7seg_red2_0;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <fsm_automatic+0x1ac>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <fsm_automatic+0x1ac>)
 80009ce:	801a      	strh	r2, [r3, #0]

				if(value_7seg_yellow_0 < 1){
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <fsm_automatic+0x1b0>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <fsm_automatic+0x16a>
					pre_state = 0;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <fsm_automatic+0x18c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
					update_value_7segment();
 80009de:	f000 fdfb 	bl	80015d8 <update_value_7segment>
				}


				flag_timer[1] = 0;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <fsm_automatic+0x198>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	805a      	strh	r2, [r3, #2]
			}

			break;
 80009e8:	e007      	b.n	80009fa <fsm_automatic+0x182>

		default:
			break;
 80009ea:	bf00      	nop
 80009ec:	e006      	b.n	80009fc <fsm_automatic+0x184>
			break;
 80009ee:	bf00      	nop
 80009f0:	e004      	b.n	80009fc <fsm_automatic+0x184>
			break;
 80009f2:	bf00      	nop
 80009f4:	e002      	b.n	80009fc <fsm_automatic+0x184>
			break;
 80009f6:	bf00      	nop
 80009f8:	e000      	b.n	80009fc <fsm_automatic+0x184>
			break;
 80009fa:	bf00      	nop
	}
	scan_led();
 80009fc:	f000 fe6a 	bl	80016d4 <scan_led>

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000ca 	.word	0x200000ca
 8000a08:	200000d4 	.word	0x200000d4
 8000a0c:	200000e2 	.word	0x200000e2
 8000a10:	200000e4 	.word	0x200000e4
 8000a14:	200000d6 	.word	0x200000d6
 8000a18:	200000e0 	.word	0x200000e0
 8000a1c:	200000d8 	.word	0x200000d8
 8000a20:	200000dc 	.word	0x200000dc
 8000a24:	200000de 	.word	0x200000de
 8000a28:	200000da 	.word	0x200000da

08000a2c <update_led_time>:

uint16_t config_value_red = 10;
uint16_t config_value_yellow = 3;
uint16_t config_value_green = 7;

void update_led_time(){
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	value_7seg_red_0 = config_value_red;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <update_led_time+0x5c>)
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <update_led_time+0x60>)
 8000a36:	801a      	strh	r2, [r3, #0]
	value_7seg_yellow_0 = config_value_yellow;
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <update_led_time+0x64>)
 8000a3a:	881a      	ldrh	r2, [r3, #0]
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <update_led_time+0x68>)
 8000a3e:	801a      	strh	r2, [r3, #0]
	value_7seg_green_0 = config_value_green;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <update_led_time+0x6c>)
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <update_led_time+0x70>)
 8000a46:	801a      	strh	r2, [r3, #0]

	value_7seg_red2_0 = config_value_red;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <update_led_time+0x5c>)
 8000a4a:	881a      	ldrh	r2, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <update_led_time+0x74>)
 8000a4e:	801a      	strh	r2, [r3, #0]
	value_7seg_yellow2_0 = config_value_yellow;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <update_led_time+0x64>)
 8000a52:	881a      	ldrh	r2, [r3, #0]
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <update_led_time+0x78>)
 8000a56:	801a      	strh	r2, [r3, #0]
	value_7seg_green2_0 = config_value_green;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <update_led_time+0x6c>)
 8000a5a:	881a      	ldrh	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <update_led_time+0x7c>)
 8000a5e:	801a      	strh	r2, [r3, #0]

	value_7seg_red_01 = value_7seg_red_0 - value_7seg_yellow_0;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <update_led_time+0x60>)
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <update_led_time+0x68>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <update_led_time+0x80>)
 8000a6e:	801a      	strh	r2, [r3, #0]
	value_7seg_red_02 = value_7seg_red_0 - value_7seg_green_0;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <update_led_time+0x60>)
 8000a72:	881a      	ldrh	r2, [r3, #0]
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <update_led_time+0x70>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <update_led_time+0x84>)
 8000a7e:	801a      	strh	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	200000d4 	.word	0x200000d4
 8000a90:	20000002 	.word	0x20000002
 8000a94:	200000da 	.word	0x200000da
 8000a98:	20000004 	.word	0x20000004
 8000a9c:	200000dc 	.word	0x200000dc
 8000aa0:	200000de 	.word	0x200000de
 8000aa4:	200000e0 	.word	0x200000e0
 8000aa8:	200000e2 	.word	0x200000e2
 8000aac:	200000d6 	.word	0x200000d6
 8000ab0:	200000d8 	.word	0x200000d8

08000ab4 <fsm_setting>:

void fsm_setting(int index){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d07a      	beq.n	8000bb8 <fsm_setting+0x104>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	f300 80af 	bgt.w	8000c28 <fsm_setting+0x174>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d003      	beq.n	8000ad8 <fsm_setting+0x24>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d038      	beq.n	8000b48 <fsm_setting+0x94>
				config_value_green--;
			}
			break;

		default:
			break;
 8000ad6:	e0a7      	b.n	8000c28 <fsm_setting+0x174>
			updateClockBuffer(config_value_red, config_value_red);
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c44 <fsm_setting+0x190>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	4a59      	ldr	r2, [pc, #356]	@ (8000c44 <fsm_setting+0x190>)
 8000ade:	8812      	ldrh	r2, [r2, #0]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fd38 	bl	8001558 <updateClockBuffer>
			blink_Led(0, var_blink);
 8000ae8:	4b57      	ldr	r3, [pc, #348]	@ (8000c48 <fsm_setting+0x194>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fc68 	bl	80013c4 <blink_Led>
			if(flag_timer[2]){
 8000af4:	4b55      	ldr	r3, [pc, #340]	@ (8000c4c <fsm_setting+0x198>)
 8000af6:	889b      	ldrh	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00c      	beq.n	8000b16 <fsm_setting+0x62>
				var_blink = !var_blink;
 8000afc:	4b52      	ldr	r3, [pc, #328]	@ (8000c48 <fsm_setting+0x194>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c48 <fsm_setting+0x194>)
 8000b0e:	601a      	str	r2, [r3, #0]
				flag_timer[2] = 0;
 8000b10:	4b4e      	ldr	r3, [pc, #312]	@ (8000c4c <fsm_setting+0x198>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	809a      	strh	r2, [r3, #4]
			if(isButtonPressed(1)){
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fdde 	bl	80006d8 <isButtonPressed>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <fsm_setting+0x7a>
				config_value_red++;
 8000b22:	4b48      	ldr	r3, [pc, #288]	@ (8000c44 <fsm_setting+0x190>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b46      	ldr	r3, [pc, #280]	@ (8000c44 <fsm_setting+0x190>)
 8000b2c:	801a      	strh	r2, [r3, #0]
			if(isButtonLongPressed(1)){
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fdec 	bl	800070c <isButtonLongPressed>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d078      	beq.n	8000c2c <fsm_setting+0x178>
				config_value_red--;
 8000b3a:	4b42      	ldr	r3, [pc, #264]	@ (8000c44 <fsm_setting+0x190>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b40      	ldr	r3, [pc, #256]	@ (8000c44 <fsm_setting+0x190>)
 8000b44:	801a      	strh	r2, [r3, #0]
			break;
 8000b46:	e071      	b.n	8000c2c <fsm_setting+0x178>
			updateClockBuffer(config_value_yellow, config_value_yellow);
 8000b48:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <fsm_setting+0x19c>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <fsm_setting+0x19c>)
 8000b4e:	8812      	ldrh	r2, [r2, #0]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fd00 	bl	8001558 <updateClockBuffer>
			blink_Led(1, var_blink);
 8000b58:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <fsm_setting+0x194>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fc30 	bl	80013c4 <blink_Led>
			if(flag_timer[2]){
 8000b64:	4b39      	ldr	r3, [pc, #228]	@ (8000c4c <fsm_setting+0x198>)
 8000b66:	889b      	ldrh	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00c      	beq.n	8000b86 <fsm_setting+0xd2>
				var_blink = !var_blink;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <fsm_setting+0x194>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf0c      	ite	eq
 8000b74:	2301      	moveq	r3, #1
 8000b76:	2300      	movne	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <fsm_setting+0x194>)
 8000b7e:	601a      	str	r2, [r3, #0]
				flag_timer[2] = 0;
 8000b80:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <fsm_setting+0x198>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	809a      	strh	r2, [r3, #4]
			if(isButtonPressed(1)){
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fda6 	bl	80006d8 <isButtonPressed>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <fsm_setting+0xea>
				config_value_yellow++;
 8000b92:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <fsm_setting+0x19c>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <fsm_setting+0x19c>)
 8000b9c:	801a      	strh	r2, [r3, #0]
			if(isButtonLongPressed(1)){
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f7ff fdb4 	bl	800070c <isButtonLongPressed>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d042      	beq.n	8000c30 <fsm_setting+0x17c>
				config_value_yellow--;
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <fsm_setting+0x19c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <fsm_setting+0x19c>)
 8000bb4:	801a      	strh	r2, [r3, #0]
			break;
 8000bb6:	e03b      	b.n	8000c30 <fsm_setting+0x17c>
			updateClockBuffer(config_value_green, config_value_green);
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <fsm_setting+0x1a0>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	@ (8000c54 <fsm_setting+0x1a0>)
 8000bbe:	8812      	ldrh	r2, [r2, #0]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fcc8 	bl	8001558 <updateClockBuffer>
			blink_Led(2, var_blink);
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <fsm_setting+0x194>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fbf8 	bl	80013c4 <blink_Led>
			if(flag_timer[2]){
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <fsm_setting+0x198>)
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00c      	beq.n	8000bf6 <fsm_setting+0x142>
				var_blink = !var_blink;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <fsm_setting+0x194>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf0c      	ite	eq
 8000be4:	2301      	moveq	r3, #1
 8000be6:	2300      	movne	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <fsm_setting+0x194>)
 8000bee:	601a      	str	r2, [r3, #0]
				flag_timer[2] = 0;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <fsm_setting+0x198>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	809a      	strh	r2, [r3, #4]
			if(isButtonPressed(1)){
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fd6e 	bl	80006d8 <isButtonPressed>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d005      	beq.n	8000c0e <fsm_setting+0x15a>
				config_value_green++;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <fsm_setting+0x1a0>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <fsm_setting+0x1a0>)
 8000c0c:	801a      	strh	r2, [r3, #0]
			if(isButtonLongPressed(1)){
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fd7c 	bl	800070c <isButtonLongPressed>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00c      	beq.n	8000c34 <fsm_setting+0x180>
				config_value_green--;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <fsm_setting+0x1a0>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <fsm_setting+0x1a0>)
 8000c24:	801a      	strh	r2, [r3, #0]
			break;
 8000c26:	e005      	b.n	8000c34 <fsm_setting+0x180>
			break;
 8000c28:	bf00      	nop
 8000c2a:	e004      	b.n	8000c36 <fsm_setting+0x182>
			break;
 8000c2c:	bf00      	nop
 8000c2e:	e002      	b.n	8000c36 <fsm_setting+0x182>
			break;
 8000c30:	bf00      	nop
 8000c32:	e000      	b.n	8000c36 <fsm_setting+0x182>
			break;
 8000c34:	bf00      	nop
	}
	scan_led();
 8000c36:	f000 fd4d 	bl	80016d4 <scan_led>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000000 	.word	0x20000000
 8000c48:	200000cc 	.word	0x200000cc
 8000c4c:	200000e4 	.word	0x200000e4
 8000c50:	20000002 	.word	0x20000002
 8000c54:	20000004 	.word	0x20000004

08000c58 <System_scan_value_led_init>:
	{SEG0_4_GPIO_Port, SEG0_4_Pin},  //  e
	{SEG0_5_GPIO_Port, SEG0_5_Pin},  //  f
	{SEG0_6_GPIO_Port, SEG0_6_Pin}   //  g
};

void System_scan_value_led_init(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	update_value_7segment();
 8000c5c:	f000 fcbc 	bl	80015d8 <update_value_7segment>
	Led7Seg_int(Led_7Seg_Array);
 8000c60:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <System_scan_value_led_init+0x34>)
 8000c62:	f7ff fad5 	bl	8000210 <Led7Seg_int>
	timer_init();
 8000c66:	f000 f925 	bl	8000eb4 <timer_init>


	//Data buffer	//Scan_led
	setTimer(0, 50);
 8000c6a:	2132      	movs	r1, #50	@ 0x32
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f92b 	bl	8000ec8 <setTimer>
	//timer step 1s for 7 segment
	setTimer(1, 1000);
 8000c72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 f926 	bl	8000ec8 <setTimer>

	// timer blink led
	setTimer(2, 500);
 8000c7c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c80:	2002      	movs	r0, #2
 8000c82:	f000 f921 	bl	8000ec8 <setTimer>

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000000c 	.word	0x2000000c

08000c90 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <MX_GPIO_Init+0xb8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <MX_GPIO_Init+0xb8>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <MX_GPIO_Init+0xb8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <MX_GPIO_Init+0xb8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <MX_GPIO_Init+0xb8>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_GPIO_Init+0xb8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_0_Pin|SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f64d 61fe 	movw	r1, #57086	@ 0xdefe
 8000cda:	481c      	ldr	r0, [pc, #112]	@ (8000d4c <MX_GPIO_Init+0xbc>)
 8000cdc:	f001 f845 	bl	8001d6a <HAL_GPIO_WritePin>
                          |SEG0_4_Pin|SEG0_5_Pin|SEG0_6_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin|LED_1_Pin
                          |LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_Red_Pin|Led_Yellow_Pin|Led_Green_Pin|Led_Red2_Pin
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8000ce6:	481a      	ldr	r0, [pc, #104]	@ (8000d50 <MX_GPIO_Init+0xc0>)
 8000ce8:	f001 f83f 	bl	8001d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SEG0_0_Pin|SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin
 8000cec:	f64d 63fe 	movw	r3, #57086	@ 0xdefe
 8000cf0:	60bb      	str	r3, [r7, #8]
                          |SEG0_4_Pin|SEG0_5_Pin|SEG0_6_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin|LED_1_Pin
                          |LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_GPIO_Init+0xbc>)
 8000d06:	f000 fe95 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <MX_GPIO_Init+0xc0>)
 8000d1e:	f000 fe89 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Led_Red_Pin|Led_Yellow_Pin|Led_Green_Pin|Led_Red2_Pin
 8000d22:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000d26:	60bb      	str	r3, [r7, #8]
                          |Led_Yellow2_Pin|Led_Green2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2302      	movs	r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_GPIO_Init+0xc0>)
 8000d3c:	f000 fe7a 	bl	8001a34 <HAL_GPIO_Init>

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f000 fd05 	bl	8001766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f80c 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff ff96 	bl	8000c90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d64:	f000 f99a 	bl	800109c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  init_button();
 8000d68:	f7ff fc4e 	bl	8000608 <init_button>
  System_scan_value_led_init();
 8000d6c:	f7ff ff74 	bl	8000c58 <System_scan_value_led_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_fsm_run();
 8000d70:	f000 f876 	bl	8000e60 <main_fsm_run>
  {
 8000d74:	bf00      	nop
 8000d76:	e7fb      	b.n	8000d70 <main+0x1c>

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b090      	sub	sp, #64	@ 0x40
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	2228      	movs	r2, #40	@ 0x28
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 ffd2 	bl	8002d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da2:	2310      	movs	r3, #16
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fff4 	bl	8001d9c <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dba:	f000 f818 	bl	8000dee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fa62 	bl	80022a0 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000de2:	f000 f804 	bl	8000dee <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3740      	adds	r7, #64	@ 0x40
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df2:	b672      	cpsid	i
}
 8000df4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df6:	bf00      	nop
 8000df8:	e7fd      	b.n	8000df6 <Error_Handler+0x8>
	...

08000dfc <change_method>:
 *  Created on: Nov 1, 2024
 *      Author: Admin
 */
#include "main_fsm_run.h"

void change_method(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	///button0
	if(isButtonPressed(0)){
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fc69 	bl	80006d8 <isButtonPressed>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <change_method+0x1c>
		button0_value++;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <change_method+0x5c>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <change_method+0x5c>)
 8000e16:	801a      	strh	r2, [r3, #0]
	}
	if(button0_value > MAX_METHOD - 1){
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <change_method+0x5c>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d902      	bls.n	8000e26 <change_method+0x2a>
		button0_value = 0;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <change_method+0x5c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	801a      	strh	r2, [r3, #0]
	}
	///button1
	if(isButtonPressed(1)){
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff fc56 	bl	80006d8 <isButtonPressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <change_method+0x42>
		button1_value++;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <change_method+0x60>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <change_method+0x60>)
 8000e3c:	801a      	strh	r2, [r3, #0]
	}
	///button2
	if(isButtonPressed(2)){
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff fc4a 	bl	80006d8 <isButtonPressed>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <change_method+0x58>
		update_led_time();
 8000e4a:	f7ff fdef 	bl	8000a2c <update_led_time>
		button0_value = 0;
 8000e4e:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <change_method+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	801a      	strh	r2, [r3, #0]
	}

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000d0 	.word	0x200000d0
 8000e5c:	200000d2 	.word	0x200000d2

08000e60 <main_fsm_run>:

void main_fsm_run(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	change_method();
 8000e64:	f7ff ffca 	bl	8000dfc <change_method>
	switch (button0_value) {
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <main_fsm_run+0x50>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d81c      	bhi.n	8000eaa <main_fsm_run+0x4a>
 8000e70:	a201      	add	r2, pc, #4	@ (adr r2, 8000e78 <main_fsm_run+0x18>)
 8000e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e76:	bf00      	nop
 8000e78:	08000e8d 	.word	0x08000e8d
 8000e7c:	08000eab 	.word	0x08000eab
 8000e80:	08000e93 	.word	0x08000e93
 8000e84:	08000e9b 	.word	0x08000e9b
 8000e88:	08000ea3 	.word	0x08000ea3
		case AUTOMATiC:
			fsm_automatic();
 8000e8c:	f7ff fcf4 	bl	8000878 <fsm_automatic>
			break;
 8000e90:	e00c      	b.n	8000eac <main_fsm_run+0x4c>
		case MANUAL:

			break;
		case SETTING_0:
			fsm_setting(SETTING_0);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fe0e 	bl	8000ab4 <fsm_setting>
			break;
 8000e98:	e008      	b.n	8000eac <main_fsm_run+0x4c>
		case SETTING_1:
			fsm_setting(SETTING_1);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f7ff fe0a 	bl	8000ab4 <fsm_setting>
			break;
 8000ea0:	e004      	b.n	8000eac <main_fsm_run+0x4c>
		case SETTING_2:
			fsm_setting(SETTING_2);
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f7ff fe06 	bl	8000ab4 <fsm_setting>
			break;
 8000ea8:	e000      	b.n	8000eac <main_fsm_run+0x4c>
		default:
			break;
 8000eaa:	bf00      	nop
	}
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000d0 	.word	0x200000d0

08000eb4 <timer_init>:
uint16_t timer_counter[10];
uint16_t timer_MUL[10];



void timer_init(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <timer_init+0x10>)
 8000eba:	f001 fb69 	bl	8002590 <HAL_TIM_Base_Start_IT>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000120 	.word	0x20000120

08000ec8 <setTimer>:
/////////////////////////////////////////////////////////////
void setTimer(uint8_t index, uint16_t duration){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	80bb      	strh	r3, [r7, #4]
	timer_MUL[index] = duration/TIMER_CYCLE;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <setTimer+0x48>)
 8000ede:	fba1 1202 	umull	r1, r2, r1, r2
 8000ee2:	08d2      	lsrs	r2, r2, #3
 8000ee4:	b291      	uxth	r1, r2
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <setTimer+0x4c>)
 8000ee8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[index] = 0;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <setTimer+0x50>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	timer_counter[index] = timer_MUL[index];
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4906      	ldr	r1, [pc, #24]	@ (8000f14 <setTimer+0x4c>)
 8000efc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <setTimer+0x54>)
 8000f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	cccccccd 	.word	0xcccccccd
 8000f14:	2000010c 	.word	0x2000010c
 8000f18:	200000e4 	.word	0x200000e4
 8000f1c:	200000f8 	.word	0x200000f8

08000f20 <timer_run>:

void timer_run(uint8_t index){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	if(timer_counter[index] > 0){
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <timer_run+0x58>)
 8000f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01b      	beq.n	8000f6e <timer_run+0x4e>
		timer_counter[index]--;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4a0f      	ldr	r2, [pc, #60]	@ (8000f78 <timer_run+0x58>)
 8000f3a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f3e:	3a01      	subs	r2, #1
 8000f40:	b291      	uxth	r1, r2
 8000f42:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <timer_run+0x58>)
 8000f44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[index] <= 0){
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f78 <timer_run+0x58>)
 8000f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <timer_run+0x4e>
			flag_timer[index] = 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a09      	ldr	r2, [pc, #36]	@ (8000f7c <timer_run+0x5c>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timer_counter[index] = timer_MUL[index];
 8000f5e:	79fa      	ldrb	r2, [r7, #7]
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <timer_run+0x60>)
 8000f64:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f68:	4a03      	ldr	r2, [pc, #12]	@ (8000f78 <timer_run+0x58>)
 8000f6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}

}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	200000f8 	.word	0x200000f8
 8000f7c:	200000e4 	.word	0x200000e4
 8000f80:	2000010c 	.word	0x2000010c

08000f84 <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f94:	d10f      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x32>
		for(int i = 0; i < 10; i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e007      	b.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x28>
			timer_run(i);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ffbd 	bl	8000f20 <timer_run>
		for(int i = 0; i < 10; i++){
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b09      	cmp	r3, #9
 8000fb0:	ddf4      	ble.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0x18>
		}
		getKeyInput();
 8000fb2:	f7ff fbc5 	bl	8000740 <getKeyInput>

	}

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 fbb4 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <TIM2_IRQHandler+0x10>)
 8001082:	f001 fadf 	bl	8002644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000120 	.word	0x20000120

08001090 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010c2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010d0:	2209      	movs	r2, #9
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010e2:	f001 fa05 	bl	80024f0 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010ec:	f7ff fe7f 	bl	8000dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <MX_TIM2_Init+0x94>)
 80010fe:	f001 fb91 	bl	8002824 <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001108:	f7ff fe71 	bl	8000dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_TIM2_Init+0x94>)
 800111a:	f001 fd91 	bl	8002c40 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001124:	f7ff fe63 	bl	8000dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000120 	.word	0x20000120

08001134 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001144:	d113      	bne.n	800116e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_TIM_Base_MspInit+0x44>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <HAL_TIM_Base_MspInit+0x44>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_TIM_Base_MspInit+0x44>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201c      	movs	r0, #28
 8001164:	f000 fc2f 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001168:	201c      	movs	r0, #28
 800116a:	f000 fc48 	bl	80019fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <decoder_Led>:

//decoder_Led(0, 1, 1, 1, 1, 0); state 0
//decoder_Led(0, 1, 1, 1, 0, 1); state 1
//decoder_Led(1, 1, 0, 0, 1, 1); state 2
//decoder_Led(1, 0, 1, 0, 1, 1); state 3
void decoder_Led(int index){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	switch (index) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b07      	cmp	r3, #7
 8001188:	f200 8114 	bhi.w	80013b4 <decoder_Led+0x238>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <decoder_Led+0x18>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011b5 	.word	0x080011b5
 8001198:	080011f5 	.word	0x080011f5
 800119c:	08001235 	.word	0x08001235
 80011a0:	08001275 	.word	0x08001275
 80011a4:	080012b5 	.word	0x080012b5
 80011a8:	080012f5 	.word	0x080012f5
 80011ac:	08001335 	.word	0x08001335
 80011b0:	08001375 	.word	0x08001375
		// method 1
		case 0:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2108      	movs	r1, #8
 80011b8:	4881      	ldr	r0, [pc, #516]	@ (80013c0 <decoder_Led+0x244>)
 80011ba:	f000 fdd6 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 80011be:	2201      	movs	r2, #1
 80011c0:	2110      	movs	r1, #16
 80011c2:	487f      	ldr	r0, [pc, #508]	@ (80013c0 <decoder_Led+0x244>)
 80011c4:	f000 fdd1 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2120      	movs	r1, #32
 80011cc:	487c      	ldr	r0, [pc, #496]	@ (80013c0 <decoder_Led+0x244>)
 80011ce:	f000 fdcc 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2140      	movs	r1, #64	@ 0x40
 80011d6:	487a      	ldr	r0, [pc, #488]	@ (80013c0 <decoder_Led+0x244>)
 80011d8:	f000 fdc7 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2180      	movs	r1, #128	@ 0x80
 80011e0:	4877      	ldr	r0, [pc, #476]	@ (80013c0 <decoder_Led+0x244>)
 80011e2:	f000 fdc2 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ec:	4874      	ldr	r0, [pc, #464]	@ (80013c0 <decoder_Led+0x244>)
 80011ee:	f000 fdbc 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 80011f2:	e0e0      	b.n	80013b6 <decoder_Led+0x23a>
		case 1:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2108      	movs	r1, #8
 80011f8:	4871      	ldr	r0, [pc, #452]	@ (80013c0 <decoder_Led+0x244>)
 80011fa:	f000 fdb6 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	2110      	movs	r1, #16
 8001202:	486f      	ldr	r0, [pc, #444]	@ (80013c0 <decoder_Led+0x244>)
 8001204:	f000 fdb1 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	2120      	movs	r1, #32
 800120c:	486c      	ldr	r0, [pc, #432]	@ (80013c0 <decoder_Led+0x244>)
 800120e:	f000 fdac 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	2140      	movs	r1, #64	@ 0x40
 8001216:	486a      	ldr	r0, [pc, #424]	@ (80013c0 <decoder_Led+0x244>)
 8001218:	f000 fda7 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2180      	movs	r1, #128	@ 0x80
 8001220:	4867      	ldr	r0, [pc, #412]	@ (80013c0 <decoder_Led+0x244>)
 8001222:	f000 fda2 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800122c:	4864      	ldr	r0, [pc, #400]	@ (80013c0 <decoder_Led+0x244>)
 800122e:	f000 fd9c 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 8001232:	e0c0      	b.n	80013b6 <decoder_Led+0x23a>
		case 2:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4861      	ldr	r0, [pc, #388]	@ (80013c0 <decoder_Led+0x244>)
 800123a:	f000 fd96 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	2110      	movs	r1, #16
 8001242:	485f      	ldr	r0, [pc, #380]	@ (80013c0 <decoder_Led+0x244>)
 8001244:	f000 fd91 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2120      	movs	r1, #32
 800124c:	485c      	ldr	r0, [pc, #368]	@ (80013c0 <decoder_Led+0x244>)
 800124e:	f000 fd8c 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2140      	movs	r1, #64	@ 0x40
 8001256:	485a      	ldr	r0, [pc, #360]	@ (80013c0 <decoder_Led+0x244>)
 8001258:	f000 fd87 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	4857      	ldr	r0, [pc, #348]	@ (80013c0 <decoder_Led+0x244>)
 8001262:	f000 fd82 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800126c:	4854      	ldr	r0, [pc, #336]	@ (80013c0 <decoder_Led+0x244>)
 800126e:	f000 fd7c 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 8001272:	e0a0      	b.n	80013b6 <decoder_Led+0x23a>
		case 3:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2108      	movs	r1, #8
 8001278:	4851      	ldr	r0, [pc, #324]	@ (80013c0 <decoder_Led+0x244>)
 800127a:	f000 fd76 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2110      	movs	r1, #16
 8001282:	484f      	ldr	r0, [pc, #316]	@ (80013c0 <decoder_Led+0x244>)
 8001284:	f000 fd71 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2120      	movs	r1, #32
 800128c:	484c      	ldr	r0, [pc, #304]	@ (80013c0 <decoder_Led+0x244>)
 800128e:	f000 fd6c 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2140      	movs	r1, #64	@ 0x40
 8001296:	484a      	ldr	r0, [pc, #296]	@ (80013c0 <decoder_Led+0x244>)
 8001298:	f000 fd67 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	2180      	movs	r1, #128	@ 0x80
 80012a0:	4847      	ldr	r0, [pc, #284]	@ (80013c0 <decoder_Led+0x244>)
 80012a2:	f000 fd62 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ac:	4844      	ldr	r0, [pc, #272]	@ (80013c0 <decoder_Led+0x244>)
 80012ae:	f000 fd5c 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 80012b2:	e080      	b.n	80013b6 <decoder_Led+0x23a>
		//////////////////////////////////// GPIO SETTING /////////////////////////////////////////
		//setting
		//setting blink red
		case 4:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2108      	movs	r1, #8
 80012b8:	4841      	ldr	r0, [pc, #260]	@ (80013c0 <decoder_Led+0x244>)
 80012ba:	f000 fd56 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 80012be:	2201      	movs	r2, #1
 80012c0:	2110      	movs	r1, #16
 80012c2:	483f      	ldr	r0, [pc, #252]	@ (80013c0 <decoder_Led+0x244>)
 80012c4:	f000 fd51 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2120      	movs	r1, #32
 80012cc:	483c      	ldr	r0, [pc, #240]	@ (80013c0 <decoder_Led+0x244>)
 80012ce:	f000 fd4c 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2140      	movs	r1, #64	@ 0x40
 80012d6:	483a      	ldr	r0, [pc, #232]	@ (80013c0 <decoder_Led+0x244>)
 80012d8:	f000 fd47 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	4837      	ldr	r0, [pc, #220]	@ (80013c0 <decoder_Led+0x244>)
 80012e2:	f000 fd42 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ec:	4834      	ldr	r0, [pc, #208]	@ (80013c0 <decoder_Led+0x244>)
 80012ee:	f000 fd3c 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 80012f2:	e060      	b.n	80013b6 <decoder_Led+0x23a>

		//setting blink yellow
		case 5:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2108      	movs	r1, #8
 80012f8:	4831      	ldr	r0, [pc, #196]	@ (80013c0 <decoder_Led+0x244>)
 80012fa:	f000 fd36 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2110      	movs	r1, #16
 8001302:	482f      	ldr	r0, [pc, #188]	@ (80013c0 <decoder_Led+0x244>)
 8001304:	f000 fd31 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 8001308:	2201      	movs	r2, #1
 800130a:	2120      	movs	r1, #32
 800130c:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <decoder_Led+0x244>)
 800130e:	f000 fd2c 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	2140      	movs	r1, #64	@ 0x40
 8001316:	482a      	ldr	r0, [pc, #168]	@ (80013c0 <decoder_Led+0x244>)
 8001318:	f000 fd27 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	4827      	ldr	r0, [pc, #156]	@ (80013c0 <decoder_Led+0x244>)
 8001322:	f000 fd22 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800132c:	4824      	ldr	r0, [pc, #144]	@ (80013c0 <decoder_Led+0x244>)
 800132e:	f000 fd1c 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 8001332:	e040      	b.n	80013b6 <decoder_Led+0x23a>

		//setting blink green
		case 6:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	2108      	movs	r1, #8
 8001338:	4821      	ldr	r0, [pc, #132]	@ (80013c0 <decoder_Led+0x244>)
 800133a:	f000 fd16 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	2110      	movs	r1, #16
 8001342:	481f      	ldr	r0, [pc, #124]	@ (80013c0 <decoder_Led+0x244>)
 8001344:	f000 fd11 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2120      	movs	r1, #32
 800134c:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <decoder_Led+0x244>)
 800134e:	f000 fd0c 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	2140      	movs	r1, #64	@ 0x40
 8001356:	481a      	ldr	r0, [pc, #104]	@ (80013c0 <decoder_Led+0x244>)
 8001358:	f000 fd07 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 800135c:	2201      	movs	r2, #1
 800135e:	2180      	movs	r1, #128	@ 0x80
 8001360:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <decoder_Led+0x244>)
 8001362:	f000 fd02 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800136c:	4814      	ldr	r0, [pc, #80]	@ (80013c0 <decoder_Led+0x244>)
 800136e:	f000 fcfc 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 8001372:	e020      	b.n	80013b6 <decoder_Led+0x23a>
		//turn off all led
		case 7:
			//traffic light 1
			HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	2108      	movs	r1, #8
 8001378:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <decoder_Led+0x244>)
 800137a:	f000 fcf6 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	2110      	movs	r1, #16
 8001382:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <decoder_Led+0x244>)
 8001384:	f000 fcf1 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	2120      	movs	r1, #32
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <decoder_Led+0x244>)
 800138e:	f000 fcec 	bl	8001d6a <HAL_GPIO_WritePin>

			//traffic light 2
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	@ 0x40
 8001396:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <decoder_Led+0x244>)
 8001398:	f000 fce7 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	2180      	movs	r1, #128	@ 0x80
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <decoder_Led+0x244>)
 80013a2:	f000 fce2 	bl	8001d6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <decoder_Led+0x244>)
 80013ae:	f000 fcdc 	bl	8001d6a <HAL_GPIO_WritePin>
			break;
 80013b2:	e000      	b.n	80013b6 <decoder_Led+0x23a>

		default:
			break;
 80013b4:	bf00      	nop
	}
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010c00 	.word	0x40010c00

080013c4 <blink_Led>:


void blink_Led(int index, int index1){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	if(index1 == 1){
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d16d      	bne.n	80014b0 <blink_Led+0xec>
		switch (index) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d04a      	beq.n	8001470 <blink_Led+0xac>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	f300 8087 	bgt.w	80014f0 <blink_Led+0x12c>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <blink_Led+0x2c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d020      	beq.n	8001430 <blink_Led+0x6c>
				HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
				HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
				HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 0);
				break;
			default:
				break;
 80013ee:	e07f      	b.n	80014f0 <blink_Led+0x12c>
				HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2108      	movs	r1, #8
 80013f4:	4841      	ldr	r0, [pc, #260]	@ (80014fc <blink_Led+0x138>)
 80013f6:	f000 fcb8 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2110      	movs	r1, #16
 80013fe:	483f      	ldr	r0, [pc, #252]	@ (80014fc <blink_Led+0x138>)
 8001400:	f000 fcb3 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	2120      	movs	r1, #32
 8001408:	483c      	ldr	r0, [pc, #240]	@ (80014fc <blink_Led+0x138>)
 800140a:	f000 fcae 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2140      	movs	r1, #64	@ 0x40
 8001412:	483a      	ldr	r0, [pc, #232]	@ (80014fc <blink_Led+0x138>)
 8001414:	f000 fca9 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 8001418:	2201      	movs	r2, #1
 800141a:	2180      	movs	r1, #128	@ 0x80
 800141c:	4837      	ldr	r0, [pc, #220]	@ (80014fc <blink_Led+0x138>)
 800141e:	f000 fca4 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001428:	4834      	ldr	r0, [pc, #208]	@ (80014fc <blink_Led+0x138>)
 800142a:	f000 fc9e 	bl	8001d6a <HAL_GPIO_WritePin>
				break;
 800142e:	e060      	b.n	80014f2 <blink_Led+0x12e>
				HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	2108      	movs	r1, #8
 8001434:	4831      	ldr	r0, [pc, #196]	@ (80014fc <blink_Led+0x138>)
 8001436:	f000 fc98 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2110      	movs	r1, #16
 800143e:	482f      	ldr	r0, [pc, #188]	@ (80014fc <blink_Led+0x138>)
 8001440:	f000 fc93 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	2120      	movs	r1, #32
 8001448:	482c      	ldr	r0, [pc, #176]	@ (80014fc <blink_Led+0x138>)
 800144a:	f000 fc8e 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	482a      	ldr	r0, [pc, #168]	@ (80014fc <blink_Led+0x138>)
 8001454:	f000 fc89 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	4827      	ldr	r0, [pc, #156]	@ (80014fc <blink_Led+0x138>)
 800145e:	f000 fc84 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001468:	4824      	ldr	r0, [pc, #144]	@ (80014fc <blink_Led+0x138>)
 800146a:	f000 fc7e 	bl	8001d6a <HAL_GPIO_WritePin>
				break;
 800146e:	e040      	b.n	80014f2 <blink_Led+0x12e>
				HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	2108      	movs	r1, #8
 8001474:	4821      	ldr	r0, [pc, #132]	@ (80014fc <blink_Led+0x138>)
 8001476:	f000 fc78 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	2110      	movs	r1, #16
 800147e:	481f      	ldr	r0, [pc, #124]	@ (80014fc <blink_Led+0x138>)
 8001480:	f000 fc73 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2120      	movs	r1, #32
 8001488:	481c      	ldr	r0, [pc, #112]	@ (80014fc <blink_Led+0x138>)
 800148a:	f000 fc6e 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 800148e:	2201      	movs	r2, #1
 8001490:	2140      	movs	r1, #64	@ 0x40
 8001492:	481a      	ldr	r0, [pc, #104]	@ (80014fc <blink_Led+0x138>)
 8001494:	f000 fc69 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	2180      	movs	r1, #128	@ 0x80
 800149c:	4817      	ldr	r0, [pc, #92]	@ (80014fc <blink_Led+0x138>)
 800149e:	f000 fc64 	bl	8001d6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a8:	4814      	ldr	r0, [pc, #80]	@ (80014fc <blink_Led+0x138>)
 80014aa:	f000 fc5e 	bl	8001d6a <HAL_GPIO_WritePin>
				break;
 80014ae:	e020      	b.n	80014f2 <blink_Led+0x12e>
		}
	}
	else{
		//turn off all led
		//traffic light 1
		HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, 1);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2108      	movs	r1, #8
 80014b4:	4811      	ldr	r0, [pc, #68]	@ (80014fc <blink_Led+0x138>)
 80014b6:	f000 fc58 	bl	8001d6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Yellow_GPIO_Port, Led_Yellow_Pin, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2110      	movs	r1, #16
 80014be:	480f      	ldr	r0, [pc, #60]	@ (80014fc <blink_Led+0x138>)
 80014c0:	f000 fc53 	bl	8001d6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2120      	movs	r1, #32
 80014c8:	480c      	ldr	r0, [pc, #48]	@ (80014fc <blink_Led+0x138>)
 80014ca:	f000 fc4e 	bl	8001d6a <HAL_GPIO_WritePin>

		//traffic light 2
		HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2140      	movs	r1, #64	@ 0x40
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <blink_Led+0x138>)
 80014d4:	f000 fc49 	bl	8001d6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	4807      	ldr	r0, [pc, #28]	@ (80014fc <blink_Led+0x138>)
 80014de:	f000 fc44 	bl	8001d6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Green2_GPIO_Port, Led_Green2_Pin, 1);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <blink_Led+0x138>)
 80014ea:	f000 fc3e 	bl	8001d6a <HAL_GPIO_WritePin>
	}




}
 80014ee:	e000      	b.n	80014f2 <blink_Led+0x12e>
				break;
 80014f0:	bf00      	nop
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40010c00 	.word	0x40010c00

08001500 <En_led_7_seg>:

uint8_t index_led = 0;
uint8_t Max_Led = 4;
uint8_t Buffer = 0;

void En_led_7_seg(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, Led_Pos[0]);
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <En_led_7_seg+0x50>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001510:	4810      	ldr	r0, [pc, #64]	@ (8001554 <En_led_7_seg+0x54>)
 8001512:	f000 fc2a 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, Led_Pos[1]);
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <En_led_7_seg+0x50>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001522:	480c      	ldr	r0, [pc, #48]	@ (8001554 <En_led_7_seg+0x54>)
 8001524:	f000 fc21 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, Led_Pos[2]);
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <En_led_7_seg+0x50>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <En_led_7_seg+0x54>)
 8001536:	f000 fc18 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, Led_Pos[3]);
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <En_led_7_seg+0x50>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001546:	4803      	ldr	r0, [pc, #12]	@ (8001554 <En_led_7_seg+0x54>)
 8001548:	f000 fc0f 	bl	8001d6a <HAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000048 	.word	0x20000048
 8001554:	40010800 	.word	0x40010800

08001558 <updateClockBuffer>:

/////////////////// counter ///////////////////
void updateClockBuffer(uint16_t value_7seg0, uint16_t value_7seg1 ){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	80bb      	strh	r3, [r7, #4]
	Led_Buffer[0] = value_7seg0 / 10;
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <updateClockBuffer+0x78>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <updateClockBuffer+0x7c>)
 8001578:	601a      	str	r2, [r3, #0]
	Led_Buffer[1] = value_7seg0 % 10;
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <updateClockBuffer+0x78>)
 800157e:	fba3 1302 	umull	r1, r3, r3, r2
 8001582:	08d9      	lsrs	r1, r3, #3
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <updateClockBuffer+0x7c>)
 8001594:	605a      	str	r2, [r3, #4]
	Led_Buffer[2] = value_7seg1 / 10;
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <updateClockBuffer+0x78>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <updateClockBuffer+0x7c>)
 80015a6:	609a      	str	r2, [r3, #8]
	Led_Buffer[3] = value_7seg1 % 10;
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <updateClockBuffer+0x78>)
 80015ac:	fba3 1302 	umull	r1, r3, r3, r2
 80015b0:	08d9      	lsrs	r1, r3, #3
 80015b2:	460b      	mov	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <updateClockBuffer+0x7c>)
 80015c2:	60da      	str	r2, [r3, #12]


}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	cccccccd 	.word	0xcccccccd
 80015d4:	20000168 	.word	0x20000168

080015d8 <update_value_7segment>:

void update_value_7segment(){
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	//contrans value
	//traffic 1
	value_7seg_red_0 = RED_TIME;
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <update_value_7segment+0x5c>)
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <update_value_7segment+0x60>)
 80015e2:	801a      	strh	r2, [r3, #0]
	value_7seg_yellow_0 = YELLOW_TIME;
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <update_value_7segment+0x64>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <update_value_7segment+0x68>)
 80015ea:	801a      	strh	r2, [r3, #0]
	value_7seg_green_0 = GREEN_TIME;
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <update_value_7segment+0x6c>)
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <update_value_7segment+0x70>)
 80015f2:	801a      	strh	r2, [r3, #0]

	value_7seg_red_01 = value_7seg_red_0 - value_7seg_yellow_0;
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <update_value_7segment+0x60>)
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <update_value_7segment+0x68>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <update_value_7segment+0x74>)
 8001602:	801a      	strh	r2, [r3, #0]
	value_7seg_red_02 = value_7seg_red_0 - value_7seg_green_0;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <update_value_7segment+0x60>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <update_value_7segment+0x70>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <update_value_7segment+0x78>)
 8001612:	801a      	strh	r2, [r3, #0]
	//traffic 2
	value_7seg_red2_0 = RED_TIME;
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <update_value_7segment+0x5c>)
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <update_value_7segment+0x7c>)
 800161a:	801a      	strh	r2, [r3, #0]
	value_7seg_yellow2_0 = YELLOW_TIME;
 800161c:	4b07      	ldr	r3, [pc, #28]	@ (800163c <update_value_7segment+0x64>)
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <update_value_7segment+0x80>)
 8001622:	801a      	strh	r2, [r3, #0]
	value_7seg_green2_0 = GREEN_TIME;
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <update_value_7segment+0x6c>)
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <update_value_7segment+0x84>)
 800162a:	801a      	strh	r2, [r3, #0]


}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000006 	.word	0x20000006
 8001638:	200000d4 	.word	0x200000d4
 800163c:	20000008 	.word	0x20000008
 8001640:	200000da 	.word	0x200000da
 8001644:	2000000a 	.word	0x2000000a
 8001648:	200000dc 	.word	0x200000dc
 800164c:	200000d6 	.word	0x200000d6
 8001650:	200000d8 	.word	0x200000d8
 8001654:	200000de 	.word	0x200000de
 8001658:	200000e0 	.word	0x200000e0
 800165c:	200000e2 	.word	0x200000e2

08001660 <update7SEG>:

/////////////////////
void update7SEG(int index){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
		//DATA BUFFER
		Buffer = Led_Buffer[index];
 8001668:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <update7SEG+0x60>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <update7SEG+0x64>)
 8001674:	701a      	strb	r2, [r3, #0]

		//scan led
		for(int i = 0; i < Max_Led; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e00f      	b.n	800169c <update7SEG+0x3c>
			Led_Pos[i] = (En_Led_Pos[index] >> i) & 0b1;
 800167c:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <update7SEG+0x68>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	490f      	ldr	r1, [pc, #60]	@ (80016cc <update7SEG+0x6c>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < Max_Led; i++){
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <update7SEG+0x70>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4293      	cmp	r3, r2
 80016a6:	dbe9      	blt.n	800167c <update7SEG+0x1c>
		}

		///////////////////////
		display7SEG(Buffer);
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <update7SEG+0x64>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff3b 	bl	8000528 <display7SEG>
		En_led_7_seg();
 80016b2:	f7ff ff25 	bl	8001500 <En_led_7_seg>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000168 	.word	0x20000168
 80016c4:	20000179 	.word	0x20000179
 80016c8:	20000058 	.word	0x20000058
 80016cc:	20000048 	.word	0x20000048
 80016d0:	20000068 	.word	0x20000068

080016d4 <scan_led>:




void scan_led(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	if(flag_timer[0]){
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <scan_led+0x3c>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d014      	beq.n	800170a <scan_led+0x36>
		update7SEG(index_led++);
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <scan_led+0x40>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	b2d1      	uxtb	r1, r2
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <scan_led+0x40>)
 80016ea:	7011      	strb	r1, [r2, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffb7 	bl	8001660 <update7SEG>
		if(index_led > Max_Led - 1) index_led = 0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <scan_led+0x44>)
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <scan_led+0x40>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d802      	bhi.n	8001704 <scan_led+0x30>
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <scan_led+0x40>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
		flag_timer[0] = 0;
 8001704:	4b02      	ldr	r3, [pc, #8]	@ (8001710 <scan_led+0x3c>)
 8001706:	2200      	movs	r2, #0
 8001708:	801a      	strh	r2, [r3, #0]
	}




}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000e4 	.word	0x200000e4
 8001714:	20000178 	.word	0x20000178
 8001718:	20000068 	.word	0x20000068

0800171c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff fcb8 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480b      	ldr	r0, [pc, #44]	@ (8001750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001722:	490c      	ldr	r1, [pc, #48]	@ (8001754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001724:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001738:	4c09      	ldr	r4, [pc, #36]	@ (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f001 fafb 	bl	8002d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff fb03 	bl	8000d54 <main>
  bx lr
 800174e:	4770      	bx	lr
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001758:	08002e00 	.word	0x08002e00
  ldr r2, =_sbss
 800175c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001760:	20000180 	.word	0x20000180

08001764 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_IRQHandler>

08001766 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 f920 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001770:	200f      	movs	r0, #15
 8001772:	f000 f805 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001776:	f7ff fc23 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f93b 	bl	8001a1a <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f903 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	@ (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000044 	.word	0x20000044
 80017d8:	20000070 	.word	0x20000070
 80017dc:	2000006c 	.word	0x2000006c

080017e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_IncTick+0x1c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_IncTick+0x20>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a03      	ldr	r2, [pc, #12]	@ (8001800 <HAL_IncTick+0x20>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000070 	.word	0x20000070
 8001800:	2000017c 	.word	0x2000017c

08001804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b02      	ldr	r3, [pc, #8]	@ (8001814 <HAL_GetTick+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	2000017c 	.word	0x2000017c

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4906      	ldr	r1, [pc, #24]	@ (80018b0 <__NVIC_EnableIRQ+0x34>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff90 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff2d 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff42 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff90 	bl	8001908 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5f 	bl	80018b4 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff35 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa2 	bl	800196c <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b08b      	sub	sp, #44	@ 0x2c
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e169      	b.n	8001d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 8158 	bne.w	8001d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a9a      	ldr	r2, [pc, #616]	@ (8001cd4 <HAL_GPIO_Init+0x2a0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d05e      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a70:	4a98      	ldr	r2, [pc, #608]	@ (8001cd4 <HAL_GPIO_Init+0x2a0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d875      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a76:	4a98      	ldr	r2, [pc, #608]	@ (8001cd8 <HAL_GPIO_Init+0x2a4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d058      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a7c:	4a96      	ldr	r2, [pc, #600]	@ (8001cd8 <HAL_GPIO_Init+0x2a4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d86f      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a82:	4a96      	ldr	r2, [pc, #600]	@ (8001cdc <HAL_GPIO_Init+0x2a8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d052      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a88:	4a94      	ldr	r2, [pc, #592]	@ (8001cdc <HAL_GPIO_Init+0x2a8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d869      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a8e:	4a94      	ldr	r2, [pc, #592]	@ (8001ce0 <HAL_GPIO_Init+0x2ac>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d04c      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a94:	4a92      	ldr	r2, [pc, #584]	@ (8001ce0 <HAL_GPIO_Init+0x2ac>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d863      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a9a:	4a92      	ldr	r2, [pc, #584]	@ (8001ce4 <HAL_GPIO_Init+0x2b0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d046      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001aa0:	4a90      	ldr	r2, [pc, #576]	@ (8001ce4 <HAL_GPIO_Init+0x2b0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d85d      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d82a      	bhi.n	8001b00 <HAL_GPIO_Init+0xcc>
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d859      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001aae:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab4 <HAL_GPIO_Init+0x80>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001b2f 	.word	0x08001b2f
 8001ab8:	08001b09 	.word	0x08001b09
 8001abc:	08001b1b 	.word	0x08001b1b
 8001ac0:	08001b5d 	.word	0x08001b5d
 8001ac4:	08001b63 	.word	0x08001b63
 8001ac8:	08001b63 	.word	0x08001b63
 8001acc:	08001b63 	.word	0x08001b63
 8001ad0:	08001b63 	.word	0x08001b63
 8001ad4:	08001b63 	.word	0x08001b63
 8001ad8:	08001b63 	.word	0x08001b63
 8001adc:	08001b63 	.word	0x08001b63
 8001ae0:	08001b63 	.word	0x08001b63
 8001ae4:	08001b63 	.word	0x08001b63
 8001ae8:	08001b63 	.word	0x08001b63
 8001aec:	08001b63 	.word	0x08001b63
 8001af0:	08001b63 	.word	0x08001b63
 8001af4:	08001b63 	.word	0x08001b63
 8001af8:	08001b11 	.word	0x08001b11
 8001afc:	08001b25 	.word	0x08001b25
 8001b00:	4a79      	ldr	r2, [pc, #484]	@ (8001ce8 <HAL_GPIO_Init+0x2b4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b06:	e02c      	b.n	8001b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e029      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	3304      	adds	r3, #4
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e024      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	3308      	adds	r3, #8
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e01f      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	330c      	adds	r3, #12
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e01a      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b36:	2304      	movs	r3, #4
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e013      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b44:	2308      	movs	r3, #8
 8001b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	611a      	str	r2, [r3, #16]
          break;
 8001b4e:	e009      	b.n	8001b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	615a      	str	r2, [r3, #20]
          break;
 8001b5a:	e003      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          break;
 8001b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2bff      	cmp	r3, #255	@ 0xff
 8001b68:	d801      	bhi.n	8001b6e <HAL_GPIO_Init+0x13a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	e001      	b.n	8001b72 <HAL_GPIO_Init+0x13e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3304      	adds	r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2bff      	cmp	r3, #255	@ 0xff
 8001b78:	d802      	bhi.n	8001b80 <HAL_GPIO_Init+0x14c>
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x152>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	3b08      	subs	r3, #8
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80b1 	beq.w	8001d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bcc:	4a48      	ldr	r2, [pc, #288]	@ (8001cf0 <HAL_GPIO_Init+0x2bc>)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a40      	ldr	r2, [pc, #256]	@ (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1ec>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf8 <HAL_GPIO_Init+0x2c4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1e8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3e      	ldr	r2, [pc, #248]	@ (8001cfc <HAL_GPIO_Init+0x2c8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1e4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d00 <HAL_GPIO_Init+0x2cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1e0>
 8001c10:	2303      	movs	r3, #3
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c20:	2300      	movs	r3, #0
 8001c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c32:	492f      	ldr	r1, [pc, #188]	@ (8001cf0 <HAL_GPIO_Init+0x2bc>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	492c      	ldr	r1, [pc, #176]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4928      	ldr	r1, [pc, #160]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4922      	ldr	r1, [pc, #136]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	491e      	ldr	r1, [pc, #120]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4918      	ldr	r1, [pc, #96]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4914      	ldr	r1, [pc, #80]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d021      	beq.n	8001d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	490e      	ldr	r1, [pc, #56]	@ (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e021      	b.n	8001d16 <HAL_GPIO_Init+0x2e2>
 8001cd2:	bf00      	nop
 8001cd4:	10320000 	.word	0x10320000
 8001cd8:	10310000 	.word	0x10310000
 8001cdc:	10220000 	.word	0x10220000
 8001ce0:	10210000 	.word	0x10210000
 8001ce4:	10120000 	.word	0x10120000
 8001ce8:	10110000 	.word	0x10110000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40011400 	.word	0x40011400
 8001d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4909      	ldr	r1, [pc, #36]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	3301      	adds	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f47f ae8e 	bne.w	8001a48 <HAL_GPIO_Init+0x14>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	372c      	adds	r7, #44	@ 0x2c
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	807b      	strh	r3, [r7, #2]
 8001d76:	4613      	mov	r3, r2
 8001d78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7a:	787b      	ldrb	r3, [r7, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e272      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbc:	4b92      	ldr	r3, [pc, #584]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d112      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4b89      	ldr	r3, [pc, #548]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d06c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d168      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e24c      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x76>
 8001e04:	4b80      	ldr	r3, [pc, #512]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a7f      	ldr	r2, [pc, #508]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7a      	ldr	r2, [pc, #488]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b78      	ldr	r3, [pc, #480]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0xbc>
 8001e3e:	4b72      	ldr	r3, [pc, #456]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a71      	ldr	r2, [pc, #452]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e58:	4b6b      	ldr	r3, [pc, #428]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b68      	ldr	r3, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a67      	ldr	r2, [pc, #412]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fcc4 	bl	8001804 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff fcc0 	bl	8001804 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	@ 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e200      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe4>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fcb0 	bl	8001804 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fcac 	bl	8001804 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1ec      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
 8001eee:	4b46      	ldr	r3, [pc, #280]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1c0      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4939      	ldr	r1, [pc, #228]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b36      	ldr	r3, [pc, #216]	@ (800200c <HAL_RCC_OscConfig+0x270>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fc65 	bl	8001804 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fc61 	bl	8001804 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1a1      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4927      	ldr	r1, [pc, #156]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b26      	ldr	r3, [pc, #152]	@ (800200c <HAL_RCC_OscConfig+0x270>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fc44 	bl	8001804 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff fc40 	bl	8001804 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e180      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03a      	beq.n	8002020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fc24 	bl	8001804 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fc20 	bl	8001804 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e160      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 fa68 	bl	80024b4 <RCC_Delay>
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7ff fc0a 	bl	8001804 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fc06 	bl	8001804 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d908      	bls.n	8002014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e146      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	42420000 	.word	0x42420000
 8002010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b92      	ldr	r3, [pc, #584]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e9      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a6 	beq.w	800217a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b8b      	ldr	r3, [pc, #556]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b88      	ldr	r3, [pc, #544]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a87      	ldr	r2, [pc, #540]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b85      	ldr	r3, [pc, #532]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7e      	ldr	r2, [pc, #504]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7ff fbc7 	bl	8001804 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff fbc3 	bl	8001804 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	@ 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e103      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <HAL_RCC_OscConfig+0x4c8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x312>
 80020a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e02d      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a69      	ldr	r2, [pc, #420]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a66      	ldr	r2, [pc, #408]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x356>
 80020d8:	4b61      	ldr	r3, [pc, #388]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a60      	ldr	r2, [pc, #384]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a57      	ldr	r2, [pc, #348]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7ff fb77 	bl	8001804 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff fb73 	bl	8001804 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0b1      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b4b      	ldr	r3, [pc, #300]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x37e>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fb61 	bl	8001804 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff fb5d 	bl	8001804 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e09b      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b40      	ldr	r3, [pc, #256]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b3c      	ldr	r3, [pc, #240]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a3b      	ldr	r2, [pc, #236]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8087 	beq.w	8002292 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d061      	beq.n	8002254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d146      	bne.n	8002226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <HAL_RCC_OscConfig+0x4cc>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff fb31 	bl	8001804 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff fb2d 	bl	8001804 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e06d      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4921      	ldr	r1, [pc, #132]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a19      	ldr	r1, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	430b      	orrs	r3, r1
 80021f2:	491b      	ldr	r1, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb01 	bl	8001804 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fafd 	bl	8001804 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e03d      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x46a>
 8002224:	e035      	b.n	8002292 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <HAL_RCC_OscConfig+0x4cc>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff faea 	bl	8001804 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff fae6 	bl	8001804 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e026      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x498>
 8002252:	e01e      	b.n	8002292 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e019      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
 8002260:	40021000 	.word	0x40021000
 8002264:	40007000 	.word	0x40007000
 8002268:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_OscConfig+0x500>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0a0      	b.n	80023f6 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80022d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e4:	4b46      	ldr	r3, [pc, #280]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a45      	ldr	r2, [pc, #276]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80022ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b43      	ldr	r3, [pc, #268]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4940      	ldr	r1, [pc, #256]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d040      	beq.n	8002390 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d115      	bne.n	800234e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e05b      	b.n	80023f6 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e053      	b.n	80023f6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4929      	ldr	r1, [pc, #164]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7ff fa50 	bl	8001804 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7ff fa4c 	bl	8001804 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e03b      	b.n	80023f6 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4915      	ldr	r1, [pc, #84]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490d      	ldr	r1, [pc, #52]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f81f 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_RCC_ClockConfig+0x160>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4909      	ldr	r1, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x164>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a08      	ldr	r2, [pc, #32]	@ (8002408 <HAL_RCC_ClockConfig+0x168>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_RCC_ClockConfig+0x16c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f9c6 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	08002dc8 	.word	0x08002dc8
 8002408:	20000044 	.word	0x20000044
 800240c:	2000006c 	.word	0x2000006c

08002410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242a:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x90>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x30>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x36>
 800243e:	e026      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002442:	613b      	str	r3, [r7, #16]
      break;
 8002444:	e026      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00f      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x90>)
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002470:	fb03 f202 	mul.w	r2, r3, r2
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e004      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a0b      	ldr	r2, [pc, #44]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
      break;
 800248c:	e002      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002490:	613b      	str	r3, [r7, #16]
      break;
 8002492:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002494:	693b      	ldr	r3, [r7, #16]
}
 8002496:	4618      	mov	r0, r3
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40021000 	.word	0x40021000
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	08002dd8 	.word	0x08002dd8
 80024ac:	08002de8 	.word	0x08002de8
 80024b0:	003d0900 	.word	0x003d0900

080024b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <RCC_Delay+0x34>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <RCC_Delay+0x38>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0a5b      	lsrs	r3, r3, #9
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d0:	bf00      	nop
  }
  while (Delay --);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	60fa      	str	r2, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <RCC_Delay+0x1c>
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000044 	.word	0x20000044
 80024ec:	10624dd3 	.word	0x10624dd3

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fe0c 	bl	8001134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 fa64 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e03f      	b.n	8002628 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002634 <HAL_TIM_Base_Start_IT+0xa4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_TIM_Base_Start_IT+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d2:	d00e      	beq.n	80025f2 <HAL_TIM_Base_Start_IT+0x62>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <HAL_TIM_Base_Start_IT+0xa8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_TIM_Base_Start_IT+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a16      	ldr	r2, [pc, #88]	@ (800263c <HAL_TIM_Base_Start_IT+0xac>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_TIM_Base_Start_IT+0x62>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a14      	ldr	r2, [pc, #80]	@ (8002640 <HAL_TIM_Base_Start_IT+0xb0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d111      	bne.n	8002616 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b06      	cmp	r3, #6
 8002602:	d010      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002614:	e007      	b.n	8002626 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40014000 	.word	0x40014000

08002644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d020      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0202 	mvn.w	r2, #2
 8002678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f998 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f98b 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f99a 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d020      	beq.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01b      	beq.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0204 	mvn.w	r2, #4
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f972 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f965 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f974 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d020      	beq.n	8002740 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0208 	mvn.w	r2, #8
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f94c 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f93f 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f94e 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d020      	beq.n	800278c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0210 	mvn.w	r2, #16
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2208      	movs	r2, #8
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f926 	bl	80029c4 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f919 	bl	80029b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f928 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0201 	mvn.w	r2, #1
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fbea 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 faa5 	bl	8002d1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00c      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8f8 	bl	80029e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0220 	mvn.w	r2, #32
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa78 	bl	8002d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIM_ConfigClockSource+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e0b4      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x186>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002878:	d03e      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0xd4>
 800287a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800287e:	f200 8087 	bhi.w	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002886:	f000 8086 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x172>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288e:	d87f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b70      	cmp	r3, #112	@ 0x70
 8002892:	d01a      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xa6>
 8002894:	2b70      	cmp	r3, #112	@ 0x70
 8002896:	d87b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b60      	cmp	r3, #96	@ 0x60
 800289a:	d050      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x11a>
 800289c:	2b60      	cmp	r3, #96	@ 0x60
 800289e:	d877      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b50      	cmp	r3, #80	@ 0x50
 80028a2:	d03c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xfa>
 80028a4:	2b50      	cmp	r3, #80	@ 0x50
 80028a6:	d873      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d058      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x13a>
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d86f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b30      	cmp	r3, #48	@ 0x30
 80028b2:	d064      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b30      	cmp	r3, #48	@ 0x30
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d867      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d05a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	e062      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028da:	f000 f992 	bl	8002c02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
      break;
 80028f6:	e04f      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002908:	f000 f97b 	bl	8002c02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f8f2 	bl	8002b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	@ 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f949 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 800293c:	e02c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800294a:	461a      	mov	r2, r3
 800294c:	f000 f910 	bl	8002b70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	@ 0x60
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f939 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 800295c:	e01c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	461a      	mov	r2, r3
 800296c:	f000 f8d2 	bl	8002b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	@ 0x40
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f929 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 800297c:	e00c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 f920 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 800298e:	e003      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
	...

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002afc <TIM_Base_SetConfig+0x100>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00b      	beq.n	8002a2c <TIM_Base_SetConfig+0x30>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x30>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a38      	ldr	r2, [pc, #224]	@ (8002b00 <TIM_Base_SetConfig+0x104>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x30>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a37      	ldr	r2, [pc, #220]	@ (8002b04 <TIM_Base_SetConfig+0x108>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	@ (8002afc <TIM_Base_SetConfig+0x100>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d017      	beq.n	8002a76 <TIM_Base_SetConfig+0x7a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4c:	d013      	beq.n	8002a76 <TIM_Base_SetConfig+0x7a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	@ (8002b00 <TIM_Base_SetConfig+0x104>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00f      	beq.n	8002a76 <TIM_Base_SetConfig+0x7a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <TIM_Base_SetConfig+0x108>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <TIM_Base_SetConfig+0x7a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a29      	ldr	r2, [pc, #164]	@ (8002b08 <TIM_Base_SetConfig+0x10c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_Base_SetConfig+0x7a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <TIM_Base_SetConfig+0x110>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_Base_SetConfig+0x7a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a27      	ldr	r2, [pc, #156]	@ (8002b10 <TIM_Base_SetConfig+0x114>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d108      	bne.n	8002a88 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <TIM_Base_SetConfig+0x100>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_Base_SetConfig+0xd0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <TIM_Base_SetConfig+0x10c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_Base_SetConfig+0xd0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <TIM_Base_SetConfig+0x110>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_Base_SetConfig+0xd0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <TIM_Base_SetConfig+0x114>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d103      	bne.n	8002ad4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	611a      	str	r2, [r3, #16]
  }
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800

08002b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f023 0201 	bic.w	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 030a 	bic.w	r3, r3, #10
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0210 	bic.w	r2, r3, #16
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	031b      	lsls	r3, r3, #12
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f043 0307 	orr.w	r3, r3, #7
 8002bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	021a      	lsls	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	609a      	str	r2, [r3, #8]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e04b      	b.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a19      	ldr	r2, [pc, #100]	@ (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	@ (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10c      	bne.n	8002cde <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40014000 	.word	0x40014000

08002d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <memset>:
 8002d30:	4603      	mov	r3, r0
 8002d32:	4402      	add	r2, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <__libc_init_array>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	2600      	movs	r6, #0
 8002d44:	4d0c      	ldr	r5, [pc, #48]	@ (8002d78 <__libc_init_array+0x38>)
 8002d46:	4c0d      	ldr	r4, [pc, #52]	@ (8002d7c <__libc_init_array+0x3c>)
 8002d48:	1b64      	subs	r4, r4, r5
 8002d4a:	10a4      	asrs	r4, r4, #2
 8002d4c:	42a6      	cmp	r6, r4
 8002d4e:	d109      	bne.n	8002d64 <__libc_init_array+0x24>
 8002d50:	f000 f81a 	bl	8002d88 <_init>
 8002d54:	2600      	movs	r6, #0
 8002d56:	4d0a      	ldr	r5, [pc, #40]	@ (8002d80 <__libc_init_array+0x40>)
 8002d58:	4c0a      	ldr	r4, [pc, #40]	@ (8002d84 <__libc_init_array+0x44>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	42a6      	cmp	r6, r4
 8002d60:	d105      	bne.n	8002d6e <__libc_init_array+0x2e>
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d68:	4798      	blx	r3
 8002d6a:	3601      	adds	r6, #1
 8002d6c:	e7ee      	b.n	8002d4c <__libc_init_array+0xc>
 8002d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d72:	4798      	blx	r3
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7f2      	b.n	8002d5e <__libc_init_array+0x1e>
 8002d78:	08002df8 	.word	0x08002df8
 8002d7c:	08002df8 	.word	0x08002df8
 8002d80:	08002df8 	.word	0x08002df8
 8002d84:	08002dfc 	.word	0x08002dfc

08002d88 <_init>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr

08002d94 <_fini>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr
